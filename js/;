import ModifierKeys from "./js/ModifierKeys.js";

/**
  * Keyboard Controller
  * Handles keyboard events
  * TODO: re-scan pressed mofifiers when a key is let go
  */
export default class KeyboardController {
    constructor() {
        this.modifierKeys = new ModifierKeys();
    }

    keyUp(key) {

        // Keep track of modifier states
        if (this.isKeyModifier(key)) {
            modifierKeys.setModifier(key, false);
            this.modifierKeys.setModif
        }

        // Disable key
        oskInterface.deactivateButton(key, "active");

        // Disable any shortcuts associated with the keyUp
        keyboardShortcuts.forEach(shortcut => {
            if (shortcut.getModifiers().includes(key)) {
                oskInterface.deactivateButton(shortcut.getKey());
            }
        });
    }

    isKeyModifier(key) {
        if (key == 'Control' || key == 'Super' || key == 'Alt' || key == 'Shift') {
            return true;
        } else {
            return false;
        }
    }
}
